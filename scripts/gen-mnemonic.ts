#!/usr/bin/env tsx

import { entropyToMnemonic } from 'bip39';
import { Buffer } from 'buffer';
import { HDNodeWallet } from 'ethers';

function fromPrivateKey(hexKey: string): void {
  const privKey = hexKey.startsWith('0x') ? hexKey.slice(2) : hexKey;

  if (privKey.length !== 64) {
    console.error('‚ùå Invalid private key length. Expected 64 hex characters.');
    process.exit(1);
  }

  const buffer = Buffer.from(privKey, 'hex');
  const entropy = Uint8Array.prototype.slice.call(buffer, 0, 16);
  const mnemonic = entropyToMnemonic(Buffer.from(entropy));
  const derived = HDNodeWallet.fromPhrase(mnemonic);

  console.log(
    '‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.'
  );
  console.log('üîë –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: 0x' + privKey);
  console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–Ω–µ–º–æ–Ω–∏–∫–∞: ', mnemonic);
  console.log('üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏: ', derived.privateKey);
  console.log('üì¨ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ', derived.address);
}

const [, , keyArg] = process.argv;

if (!keyArg) {
  console.error(
    '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç:\n\n  pnpm tsx gen-mnemonic.ts <PRIVATE_KEY>'
  );
  process.exit(1);
}

fromPrivateKey(keyArg);
